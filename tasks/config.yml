---

- name : config | Create dir for states
  file:
    path: "{{ pacemaker_states_folder }}"
    state: "directory"
  become: true

- name: config | Setting Facts
  set_fact:
    corosync_bindnet_addr: "{{ hostvars[inventory_hostname]['ansible_' + corosync_bindnet_interface]['ipv4']['address'] }}"

- name: config | Setting hacluster password
  user:
    name: "hacluster"
    password: "{{ pacemaker_hacluster_password | password_hash('sha512', ansible_hostname | regex_replace('[^a-z0-9]', '')) }}"
    update_password: always
  become: true

- name: config | Enable and start PCS daemon
  service: name=pcsd enabled=yes state=started
  
- name: Authenticate all nodes
  shell: >
    pcs cluster auth
    {% for host in groups[pacemaker_cluster_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
    -u hacluster -p {{ pacemaker_hacluster_password }} --force \
    && touch {{ pacemaker_states_folder | quote }}/auth_all_nodes.ansiblestate
  run_once: true
  args:
    creates: "{{ pacemaker_states_folder }}/auth_all_nodes.ansiblestate"

- name: Setup cluster message bus
  run_once: true
  shell: >
    pcs cluster setup --name {{ corosync_cluster_name }}
    {% for host in groups[pacemaker_cluster_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %} --force \
    && touch {{ pacemaker_states_folder | quote }}/corosync.ansiblestate
  args:
    creates: "{{ pacemaker_states_folder }}/corosync.ansiblestate"
    
- name: config | configuring corosync service to start
  template:
    src: "etc/default/corosync.j2"
    dest: "/etc/default/corosync"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
  become: true
  notify:
    - restart corosync
    - restart pacemaker
  when: ansible_os_family == "Debian"
  
# Flush handlers
- meta: flush_handlers
  become: true

- name: config | Start all cluster nodes
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - 'corosync'
    - 'pacemaker'